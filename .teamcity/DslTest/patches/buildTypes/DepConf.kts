package DslTest.patches.buildTypes

import jetbrains.buildServer.configs.kotlin.v2017_2.*
import jetbrains.buildServer.configs.kotlin.v2017_2.failureConditions.BuildFailureOnText
import jetbrains.buildServer.configs.kotlin.v2017_2.failureConditions.failOnText
import jetbrains.buildServer.configs.kotlin.v2017_2.triggers.retryBuild
import jetbrains.buildServer.configs.kotlin.v2017_2.ui.changeBuildType

/*
This patch script was generated by TeamCity on settings change in UI.
To apply it, change the buildType with uuid = 'DepConf'
accordingly and delete the patch script.
*/
changeBuildType("DepConf") {
    check(name == "Top Config") {
        "Unexpected name: '$name'"
    }
    name = "Top Conf"

    check(description == "") {
        "Unexpected description: '$description'"
    }
    description = "descriptuion"

    check(buildNumberPattern == "%build.counter%") {
        "Unexpected option value: buildNumberPattern = $buildNumberPattern"
    }
    buildNumberPattern = "id-%build.counter%"

    params {
        add {
            text("param2", "", label = "aa", description = "ffff", display = ParameterDisplay.HIDDEN, allowEmpty = true)
        }
    }

    triggers {
        add {
            retryBuild {
                attempts = 0
            }
        }
    }

    failureConditions {

        check(testFailure == true) {
            "Unexpected option value: testFailure = $testFailure"
        }
        testFailure = false

        check(javaCrash == true) {
            "Unexpected option value: javaCrash = $javaCrash"
        }
        javaCrash = false
        add {
            failOnText {
                conditionType = BuildFailureOnText.ConditionType.CONTAINS
                pattern = "Build should fail"
                failureMessage = "Build was asked to fail  %param2%"
                reverse = false
                stopBuildOnFailure = true
            }
        }
    }

    features {
        add {
            feature {
                type = "JetBrains.SharedResources"
                param("locks-param", "Res2 readLock")
            }
        }
    }

    requirements {
        add {
            doesNotExist("some.requirement")
        }
    }
}
